#! /usr/bin/perl

#
#   Copyright 2013 Micha≈Ç Rus <m@michalrus.com>
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#

use strict;
use warnings;

use LWP::UserAgent;
use HTTP::Cookies;
use JSON -support_by_pp;
use Date::Calc;
use Net::SMTP::SSL;
use File::Basename;
use Text::vCard::Addressbook;

my $file_book = dirname($0) . "/book.vcf";

# ------------------------- config

my %cfg = ();

my %cfg_fields = map { $_ => 1 } ('ContactsEmail', 'ContactsPassword', 'MailTo', 'GmailFromName', 'GmailFromEmail', 'GmailPassword');

my $cfg_file = dirname($0) . '/config.cfg';

unless (open FP, '<', $cfg_file) {
	print $cfg_file . ": " . $! . "\n\nPlease, copy config.cfg.sample to config.cfg\nand modify it to suit your needs.\n";
	exit;
};

my $line_num = 0;
while (my $line = <FP>) {
	$line_num++;
	chomp $line;
	if ($line =~ m/^\s*(#.*)?$/) {
		next;
	}
	elsif ($line =~ m/^\s*([a-z]+)\s+"(.*?)"\s*?$/i) {
		my $key = $1;
		my $val = $2;

		unless (exists($cfg_fields{$key})) {
			print $cfg_file . ': unknown key `' . $key . '\' on line ' . $line_num . ":\n\n    " . $line . "\n\n";
			exit;
		}

		$cfg{$key} = $val;
	}
	else {
		print $cfg_file . ': WTF on line ' . $line_num . ":\n\n    " . $line . "\n\n";
		exit;
	}
}

close FP;

for my $key (keys %cfg_fields) {
	unless (exists($cfg{$key})) {
		print $cfg_file . ': required key `' . $key . "\' not found\n";
		exit;
	}
}

# ------------------------- get

my $cookie_jar = HTTP::Cookies->new(
	ignore_discard => 1,
	hide_cookie2 => 1,
	);

my $ua = LWP::UserAgent->new;
$ua->cookie_jar($cookie_jar);
$ua->agent('Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.2 (KHTML, like Gecko) Chrome/15.0.874.121 Safari/535.2');
push @{ $ua->requests_redirectable }, 'POST';

$ua->add_handler(request_prepare => sub {
	my($request, $ua, $h) = @_;
#	print $request->as_string(), "\n";
});

$ua->add_handler(response_header => sub {
	my($response, $ua, $h) = @_;
#	print $response->as_string(), "\n";
});

my $r = $ua->get('http://gmail.com/');

my $start_time = time;

die '-ERR(0)- ', $r->status_line
	unless $r->is_success;

my $dsh = '';
my $galx = '';
if ($r->content =~ m/name="dsh".*?value="([^"]+)/mis) {
	$dsh = $1;
}
if ($r->content =~ m/name="GALX".*?value="([^"]+)/mis) {
	$galx = $1;
}

$r = $ua->post('https://accounts.google.com/ServiceLoginAuth', [
	'continue' => 'https://mail.google.com/mail/',
	'service' => 'mail',
	'rm' => 'false',
	'dsh' => $dsh,
	'ltmpl' => 'default',
	'ltmpl' => 'default',
	'scc' => '1',
	'ss' => '1',
	'GALX' => $galx,
	'pstMsg' => '1',
	'dnConn' => 'https://accounts.youtube.com',
	'timeStmp' => '',
	'secTok' => '',
	'Email' => $cfg{'ContactsEmail'},
	'Passwd' => $cfg{'ContactsPassword'},
	'signIn' => 'Sign in',
	'rmShown' => '1'
	]);

die '-ERR(1)- ', $r->status_line
	unless $r->is_success;

$r = $ua->get('https://mail.google.com/mail/c/data/contactstore?ac=false&clid=gmail466144&ct=false&gp=false&hl=en&out=js&type=4&ud=true');

die '-ERR(2)- ', $r->status_line
	unless $r->is_success;

die unless ($r->content =~ m/AuthToken....Value...([^"]+)/i);
my $auth_token = $1;

$r = $ua->get('https://mail.google.com/mail/c/data/export?exportType=ALL&out=VCARD&tok=' . $auth_token, ":content_file" => $file_book);

die '-ERR(3)- ', $r->status_line
	unless $r->is_success;

# ------------------------- parse & process

my $address_book = Text::vCard::Addressbook->load([ $file_book ]);
unlink($file_book);
#$address_book->import_data($r);

my @events;

sub annu {
	my ($name, $type, $date, $bday) = @_;

	if (!$date) { return; }

	my ($ny, $nm, $nd) = Date::Calc::Today();
	my ($dy, $dm, $dd) = split(/[\/\-]/, $date);
	my $xy = $ny;

	# first nameday is always *after* birth date -- a special case of anniversary; disregard nameday's year!
	my $handling_nameday = ($type =~ /name[\- ]*day/i ? 1 : 0);
	if ($handling_nameday && defined $bday) {
		my ($by, $bm, $bd) = split(/[\/\-]/, $bday);
		$dy = $by;
		# if nameday is *before* bday (considering month and day only), increment $dy
		if (Date::Calc::Delta_Days($by, $dm, $dd, $by, $bm, $bd) > 0) {
			$dy++;
		}
	}

	my $delta;
	while (1) {
		$delta = Date::Calc::Delta_Days($ny, $nm, $nd, $xy, $dm, $dd);
		if ($delta < 0) { $xy++; } else { last; }
	}

	if (!($#ARGV >= 0 && $ARGV[0] eq 'all') && $delta > 3 && !grep $_ == $delta, ( 7, 14, 21, 28 )) {
		return;
	}

	my $msg;
	if ($type eq 'birthday') {
		$msg = $name . ' (born ' . Date::Calc::Date_to_Text($dy, $dm, $dd) . ') turns '	. ($xy - $dy);
	} elsif ($handling_nameday) {
		my $num = $xy - $dy + 1; # +1, because name day is not an anniversary!!! 1st after your birth date is 1st, not 0th
		$msg = $name . ' celebrates ' . Date::Calc::English_Ordinal($num) . ' name day';
	} elsif ($type =~ /wedding|anniversary/i) {
		$msg = $name . ' celebrates ' . Date::Calc::English_Ordinal($xy - $dy) . ' wedding anniversary';
	} elsif ($type =~ /death/i) {
		$msg = $name . ' celebrates ' . Date::Calc::English_Ordinal($xy - $dy) . ' death anniversary';
	} else {
		$msg = $name . ' celebrates ' . Date::Calc::English_Ordinal($xy - $dy) . ' ' . $type;
	}

	$msg .= ' in ' . $delta . ' day' . ($delta == 1 ? '' : 's') . ' (on ' . Date::Calc::Date_to_Text_Long($xy, $dm, $dd) . ').';
	$msg =~ s/0([0-9](st|nd|rd|th))/$1/ig;

	return ( $delta, $msg );
}

foreach my $vcard ($address_book->vcards()) {
	my $bday;

	if ($vcard->bday()) {
		$bday = $vcard->bday();
		my @msg = annu($vcard->fullname(), 'birthday', $vcard->bday(), $bday);
		push @events, [ @msg ] if (@msg);
	}	

	if ($vcard->note()) {
		my $n = $vcard->note();
		$n =~ s/\\n/\n/g;
		$n =~ s/\\([,:;"])/$1/g;
		$n =~ s/\\\\/\\/g;
		$n =~ s/\n/\0/g;
		$n =~ s/\s//g;
		$n =~ s/\0/\n/g;

		while ($n =~ m/(name-*day|wedding|death):*([0-9\-\/]+)/gi) {
			my @msg = annu($vcard->fullname(), $1, $2, $bday);
			push @events, [ @msg ] if (@msg);
		}
	}

	my $dates = $vcard->get('X-ABDATE');
	if (defined $dates) {
		foreach my $date (@{ $dates }) {
			my $group = $date->group();
			my $value = $date->value();

			my $label = $vcard->get_group($group, 'X-ABLabel');
			if (defined $label) {
				$label = $label->[0]->value();
			}
			else {
				$label = '';
			}

			my @msg = annu($vcard->fullname(), $label, $value, $bday);
			push @events, [ @msg ] if (@msg);
		}
	}
}

@events = sort { $a->[0] <=> $b->[0] } @events;

# ------------------------- mail

my $smtp;

{
	local $main::SIG{__WARN__} = sub {
		my $warn = $_[0];
		unless ($warn =~ m/default of SSL_verify_mode of SSL_VERIFY_NONE/) {
			warn $warn;
		}
	};

	$smtp = Net::SMTP::SSL->new('smtp.gmail.com', Port => 465, Timeout => 30, Hello => 'annibot', Debug => 0)
		or die "-ERR(3)- could not connect to server; $!";
}

$smtp->auth ($cfg{'GmailFromEmail'}, $cfg{'GmailPassword'})
	or die "-ERR(4)- could not authenticate; $!";
$smtp->mail($cfg{'GmailFromEmail'});
$smtp->to($cfg{'MailTo'});

$smtp->data();

$smtp->datasend('Subject: Upcoming anniversaries.' . "\n");
$smtp->datasend('To: ' . $cfg{'MailTo'} . "\n");
$smtp->datasend('From: ' . $cfg{'GmailFromName'} . ' <' . $cfg{'GmailFromEmail'} . '>' . "\n");
$smtp->datasend('Content-Type: text/plain; charset=UTF-8; format=flowed' . "\n");
$smtp->datasend('Content-Transfer-Encoding: 8bit' . "\n");
$smtp->datasend('MIME-Version: 1.0' . "\n");
$smtp->datasend("\n\n");

if ($#events < 0) {
	$smtp->datasend("[none]\n\n");
}
else {
	for (my $i = 0; $i <= $#events; $i++) {
		$smtp->datasend($events[$i][1] . "\n\n");
	}
}

$smtp->dataend();

$smtp->quit();
