#! /usr/bin/perl

#
#   Copyright 2013 Micha≈Ç Rus <m@michalrus.com>
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#

use strict;
use warnings;

use Date::Calc;
use Net::SMTP::SSL;
use File::Basename;
use XML::Simple qw(:strict);
use IPC::Run3;

use utf8;
use open ':std', ':encoding(UTF-8)';

# ------------------------- config

my %cfg = ();

my %cfg_fields = map { $_ => 1 } ('MailTo', 'GmailFromName', 'GmailFromEmail', 'GmailPassword');

my $cfg_file = dirname($0) . '/config.cfg';

unless (open FP, '<', $cfg_file) {
	print $cfg_file . ": " . $! . "\n\nPlease, copy config.cfg.sample to config.cfg\nand modify it to suit your needs.\n";
	exit;
};

my $line_num = 0;
while (my $line = <FP>) {
	$line_num++;
	chomp $line;
	if ($line =~ m/^\s*(#.*)?$/) {
		next;
	}
	elsif ($line =~ m/^\s*([a-z]+)\s+"(.*?)"\s*?$/i) {
		my $key = $1;
		my $val = $2;

		unless (exists($cfg_fields{$key})) {
			print $cfg_file . ': unknown key `' . $key . '\' on line ' . $line_num . ":\n\n    " . $line . "\n\n";
			exit;
		}

		$cfg{$key} = $val;
	}
	else {
		print $cfg_file . ': WTF on line ' . $line_num . ":\n\n    " . $line . "\n\n";
		exit;
	}
}

close FP;

for my $key (keys %cfg_fields) {
	unless (exists($cfg{$key})) {
		print $cfg_file . ': required key `' . $key . "\' not found\n";
		exit;
	}
}

# ------------------------- get

my $get_all_output;
my @cmd = (dirname($0) . '/get-all');
eval {
  run3 \@cmd, \undef, \$get_all_output, \$get_all_output;
};
die if ($@);

$get_all_output =~ s/^\s+|\s+$//gm;
$get_all_output .= "\n\n" if (length $get_all_output);

if ($? != 0) {
  $get_all_output .= 'FATAL: `get-all` failed; continuing with local `all.xml`.' . "\n\n";
}

# ------------------------- parse & process

my @events;

sub annu {
	my ($name, $dates) = @_;
	return unless %$dates;

	my $dead = 0;
	for my $key (keys %$dates) {
		$dead = 1 if $key =~ m/death|dead/i;
	}

	my $bday;
	$bday = sanitize_date($dates->{'birthday'}) if defined $dates->{'birthday'};

	my ($ny, $nm, $nd) = Date::Calc::Today();

	for my $type (keys %$dates) {
		my $date = $dates->{$type};

		my ($dy, $dm, $dd) = split(/[\/\-]/, sanitize_date($date));
		my $xy = $ny;

		# first nameday is always *after* birth date -- a special case of anniversary; disregard nameday's year!
		my $handling_nameday = ($type =~ /name[\- ]*day/i ? 1 : 0);
		if ($handling_nameday && defined $bday) {
			my ($by, $bm, $bd) = split(/[\/\-]/, $bday);
			$dy = $by;
			# if nameday is *before* bday (considering month and day only), increment $dy
			if (Date::Calc::Delta_Days($by, $dm, $dd, $by, $bm, $bd) > 0) {
				$dy++;
			}
		}

		my $delta;
		while (1) {
			$delta = Date::Calc::Delta_Days($ny, $nm, $nd, $xy, $dm, $dd);
			if ($delta < 0) { $xy++; } else { last; }
		}

		if (!($#ARGV >= 0 && $ARGV[0] eq 'all') && $delta > 3 && !grep $_ == $delta, ( 7, 14, 21, 28 )) {
			next;
		}

		my $handling_death = ($type =~ /death|dead/i ? 1 : 0);

		my $turns = ' turns ';
		my $celebrates = ' celebrates ';
		if ($dead && !$handling_death) {
			$turns = ' would turn ';
			$celebrates = ' would celebrate ';
		}

		my $msg;
		if ($type eq 'birthday') {
			$msg = $name . ' (born ' . Date::Calc::Date_to_Text($dy, $dm, $dd) . ')' . $turns . ($xy - $dy);
		} elsif ($handling_nameday) {
			my $num = $xy - $dy + 1; # +1, because name day is not an anniversary!!! 1st after your birth date is 1st, not 0th
			$msg = $name . $celebrates . Date::Calc::English_Ordinal($num) . ' name day';
		} elsif ($handling_death) {
			$msg = $name . $celebrates . Date::Calc::English_Ordinal($xy - $dy) . ' death anniversary';
		} elsif ($type =~ /wedding|anniversary/i) {
			$msg = $name . $celebrates . Date::Calc::English_Ordinal($xy - $dy) . ' wedding anniversary';
		} else {
			$msg = $name . $celebrates . Date::Calc::English_Ordinal($xy - $dy) . ' ' . $type;
		}

		$msg .= ' in ' . $delta . ' day' . ($delta == 1 ? '' : 's') . ' (on ' . Date::Calc::Date_to_Text_Long($xy, $dm, $dd) . ').';
		$msg =~ s/0([0-9](st|nd|rd|th))/$1/ig;

		push @events, [ ( $delta, $msg ) ];
	}
}

sub sanitize_date {
	my ($in) = @_;
	my ($y, $m, $d) = [0, 0, 0];
	if ($in =~ /^(\d+|-)-(\d+|-)-(\d+|-)$/) {
		$y = $1;
		$m = $2;
		$d = $3;
	}
	$y = 1800 if ($y eq '-');
	$m = 1 if ($m eq '-');
	$d = 1 if ($d eq '-');
	return "$y-$m-$d";
}

my $all = XMLin(dirname($0) . '/all.xml', KeyAttr => { }, ForceArray => [ 'entry', 'gContact:event' ]);

foreach my $entry (@{$all->{'entry'}}) {
  my $bday;
  my $name = $entry->{'title'};

  my $dates = {};

  if (defined $entry->{'gContact:birthday'}) {
    $bday = $entry->{'gContact:birthday'}->{'when'};
    $dates->{'birthday'} = $bday;
  }

  if (defined $entry->{'gContact:event'}) {
    foreach my $event (@{$entry->{'gContact:event'}}) {
      my $label = '';
      $label = $event->{'label'} if (defined $event->{'label'});
      $label = $event->{'rel'} if (defined $event->{'rel'});
      my $value = $event->{'gd:when'}->{'startTime'};
      $dates->{$label} = $value;
    }
  }

  annu($name, $dates);
}

@events = sort { $a->[0] <=> $b->[0] } @events;

# ------------------------- mail

my $smtp;

{
	local $main::SIG{__WARN__} = sub {
		my $warn = $_[0];
		unless ($warn =~ m/default of SSL_verify_mode of SSL_VERIFY_NONE/) {
			warn $warn;
		}
	};

	$smtp = Net::SMTP::SSL->new('smtp.gmail.com', Port => 465, Timeout => 30, Hello => 'annibot', Debug => 0)
		or die "-ERR(3)- could not connect to server; $!";
}

$smtp->auth ($cfg{'GmailFromEmail'}, $cfg{'GmailPassword'})
	or die "-ERR(4)- could not authenticate; " . $smtp->message;
$smtp->mail($cfg{'GmailFromEmail'});
$smtp->to($cfg{'MailTo'});

$smtp->data();

$smtp->datasend('Subject: Upcoming anniversaries.' . "\n");
$smtp->datasend('To: ' . $cfg{'MailTo'} . "\n");
$smtp->datasend('From: ' . $cfg{'GmailFromName'} . ' <' . $cfg{'GmailFromEmail'} . '>' . "\n");
$smtp->datasend('Content-Type: text/plain; charset=UTF-8; format=flowed' . "\n");
$smtp->datasend('Content-Transfer-Encoding: 8bit' . "\n");
$smtp->datasend('MIME-Version: 1.0' . "\n");
$smtp->datasend("\n");

$smtp->datasend($get_all_output);

if ($#events < 0) {
	$smtp->datasend("[none]\n\n");
}
else {
	for (my $i = 0; $i <= $#events; $i++) {
		$smtp->datasend($events[$i][1] . "\n\n");
	}
}

$smtp->dataend();

$smtp->quit();
